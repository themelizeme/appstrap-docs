I"´<h3 id="assetsfiles-used-per-page">Assets/Files used per page</h3>

<p>All files within <code class="language-plaintext highlighter-rouge">/src/assets</code> are automatically copied to <code class="language-plaintext highlighter-rouge">/dist/assets</code> by Gulp when you run <code class="language-plaintext highlighter-rouge">yarn gulp</code> or <code class="language-plaintext highlighter-rouge">yarn gulp build</code> OR whenever you edit or add new files.</p>

<p>Gulp will also create a file called <code class="language-plaintext highlighter-rouge">assets-map.json</code> within <code class="language-plaintext highlighter-rouge">/dist/assets</code> which lists all the assets used per page so you can keep track of your file assets. In addition, when you run <code class="language-plaintext highlighter-rouge">yarn gulp build</code> the <code class="language-plaintext highlighter-rouge">assets-map.json</code> file used to remove any files from <code class="language-plaintext highlighter-rouge">/dist/assets</code> that are not currently in use within your HTML files.</p>

<p><span class="badge text-white bg-primary">Config options</span> To disable the removal of unused assets you can set <code class="language-plaintext highlighter-rouge">buildSettings.unusedAssets: false</code> in your <code class="language-plaintext highlighter-rouge">config.PROJECT.js</code> file.</p>

<p><code class="language-plaintext highlighter-rouge">yarn gulp build</code> will also compress your image files to make them as small as possible when copied to <code class="language-plaintext highlighter-rouge">/dist/assets</code>, this step can take awhile if you have a lot of images so itâ€™s only run on the build command.</p>

<p>To reference assets in your HTML simply use <code class="language-plaintext highlighter-rouge">/assets/img/FOLDER/FILE.EXTENSION</code>.</p>

<h3 id="css">CSS</h3>

<p>Thanks to the awesomeness of Gulp and purifycss you can now streamline your final CSS code before you launch your site.</p>

<p>Once youâ€™ve done developing your site or at any point you like simply do the following:</p>

<ol>
  <li>Remove any unused <kbd>.html</kbd> files from the site root</li>
  <li>In terminal, run command: <code>yarn gulp build</code></li>
</ol>

<p>This will compare the CSS selectors used in the HTML files with the CSS in the CSS files (assets/css) and remove any CSS not being used.</p>

<h3 id="javascript-plugins">Javascript Plugins</h3>

<p>We use Gulp to pull all our .js files together into script.s &amp; script.min.js. This means you can since version 3.1.0 easier remove plugins you donâ€™t need simply by deleting them from the <kbd>/src/assets/js/src/plugins</kbd> directory or by changing the .js file extension.</p>

<div class="hl-box">
  <span class="badge text-white bg-primary hl-box-title">Config options</span>
  
  <p>You can alter the Javascript files compiled by AppStrap Docs using the <code>paths.src.JSSourceFiles</code> file glob. The order is important but you can for example exclude a given plugin using <code>'!./src/js/plugins/fakeLoader.js'</code> in the glob. Similarly with <code>paths.src.JSSourceFilesVendors</code> which compiles the vendor packages needed for AppStrap Docs.</p>

  <p>When the config setting <code>includeCustomJS: true</code> is set <code>/dist/assets/js/custom.script.js</code> is automatically included in HTML files. You can also add additional Javascript files to your pages using <code>additionalJS</code> for example:</p>

  
<figure class="highlight"><pre><code class="language-html" data-lang="html">  additionalJS: [ // add additional JS files to footer
    './projects/myproject/js/custom1.js',
    './projects/myproject/js/custom2.js'
  ],
  </code></pre></figure>

</div>
:ET